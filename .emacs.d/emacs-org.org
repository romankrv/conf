#+TITLE:  Emacs Org-Mode Settings
#+AUTHOR: Roman Kalinichenko
#+EMAIL:  romankrv@gmail.com


[[http://orgmode.org][Org Mode]] is one of the most powerful and amazing features of Emacs.
I mostly use it for task/day organization and generating code snippets in HTML.
Just a few tweaks here to make the experience better.

* Prerequisites

  #+BEGIN_SRC elisp
    (require 'ox-html)
    (require 'ox-publish)
  #+END_SRC

  Need htmlize for the code highlighting in the exports

  #+BEGIN_SRC elisp
    (use-package htmlize :ensure t)
  #+END_SRC

* Initial Settings

  _Initialization of Org Mode by hooking it into YASnippets, and other settings_

  #+BEGIN_SRC elisp
    (use-package org
      :ensure t
      :init
        (setq org-directory "~/Dropbox/orgfiles"
              org-default-notes-file (concat org-directory "/notes.org")
              org-hide-emphasis-markers t
              org-fontify-emphasized-text t
              org-export-coding-system 'utf-8
              org-src-fontify-natively t
              org-use-speed-commands t
              org-return-follows-link t
              org-hide-leading-stars t
              org-confirm-babel-evaluate nil

              ;; Org-html export configuration
              org-html-doctype "html5"
              org-html-html5-fancy t
              org-html-postamble nil

              ;; Change behavior of TAB as per the appropriate major mode
              ;org-startup-indented t

              ;; Preserve the indentation inside of source blocks
              ;org-src-tab-acts-natively t
              ;org-src-preserve-indentation t

;              org-startup-folded (quote overview)
              org-todo-keywords '((sequence "TODO(t)" "DOING(g)" "|" "DONE(d)")
                                  (sequence "|" "CANCELED(c)")))
              (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
              (add-to-list 'auto-mode-alist '(".*/[0-9]*$" . org-mode))   ;; Journal entries

        (setq org-ellipsis " ▼")

      :bind (("C-c l" . org-store-link)
             ("C-c c" . org-capture)
             ("C-M-|" . indent-rigidly))
      :config
        (font-lock-add-keywords            ; A bit silly but my headers are now
          'org-mode `(("^\\*+ \\(TODO\\) "  ; shorter, and that is nice canceled
          (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑")
          nil)))
          ("^\\*+ \\(DOING\\) "
          (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐")
          nil)))
          ("^\\*+ \\(CANCELED\\) "
          (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘")
          nil)))
          ("^\\*+ \\(DONE\\) "
          (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔")
          nil))))))
  #+END_SRC

  This is a extension of Emacs that provide auto-complete sources for org-mode.
  You’ll be able to use auto-complete as substitute for pcomplete which is bound
  to M-TAB

  #+BEGIN_SRC elisp
    (use-package org-ac
      :ensure t
      :diminish auto-complete-mode
      :init (org-ac/config-default))
        (setq ac-comphist-file "~/.emacs.d/backups/ac-comphist.dat")
  #+END_SRC

  #+BEGIN_SRC elisp
    (use-package org-mime :ensure t :defer t)
  #+END_SRC

* Specify the Org Directories

  I keep all my org-mode files in a few directories, and I would like them
  automatically searched when I generate agendas.

  #+BEGIN_SRC elisp
    (setq org-agenda-files '("~/Dropbox/org/personal"
                             "~/Dropbox/org/technical"
                             "~/Dropbox/org/project"))
  #+END_SRC

* Local Key Bindings
** Better Org Return
  #+BEGIN_SRC elisp
    (defun ha/org-return (&optional ignore)
     "Add new list item, heading or table row with RET.
     A double return on an empty element deletes it.
     Use a prefix arg to get regular RET. "
      (interactive "P")
      (if ignore
          (org-return)
        (cond
         ;; Open links like usual
         ((eq 'link (car (org-element-context)))
          (org-return))
         ;; lists end with two blank lines, so we need to make sure we are also not
         ;; at the beginning of a line to avoid a loop where a new entry gets
         ;; created with only one blank line.
         ((and (org-in-item-p) (not (bolp)))
          (if (org-element-property :contents-begin (org-element-context))
              (org-insert-heading)
            (beginning-of-line)
            (setf (buffer-substring
                   (line-beginning-position) (line-end-position)) "")
            (org-return)))
         ((org-at-heading-p)
          (if (not (string= "" (org-element-property :title (org-element-context))))
              (progn (org-end-of-meta-data)
                     (org-insert-heading))
            (beginning-of-line)
            (setf (buffer-substring
                   (line-beginning-position) (line-end-position)) "")))
         ((org-at-table-p)
          (if (-any?
               (lambda (x) (not (string= "" x)))
               (nth
                (- (org-table-current-dline) 1)
                (org-table-to-lisp)))
              (org-return)
            ;; empty row
            (beginning-of-line)
            (setf (buffer-substring
                   (line-beginning-position) (line-end-position)) "")
            (org-return)))
         (t
          (org-return)))))

    (define-key org-mode-map (kbd "RET")  #'ha/org-return)
  #+END_SRC

* Color and Display

  Displaying the headers using various bullets are nice for my presentations.

  #+BEGIN_SRC elisp
    (use-package org-bullets
     :ensure t
     :init (add-hook 'org-mode-hook 'org-bullets-mode))
  #+END_SRC

  #+BEGIN_SRC elisp
    (use-package org
      :init
       (font-lock-add-keywords 'org-mode
      '(("^ +\\([-*]\\) "
        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))
  #+END_SRC

* Export Settings

  Seems some change now requires a direct load of HTML:

  To make the =org-mode= export defaults closer to my liking
  (without having to put specific #+PROPERTY commands), I get rid of
  the postamble, and then configure the default fonts.

  #+BEGIN_SRC elisp
    (setq org-html-postamble nil)
    (setq org-export-with-section-numbers nil)
    (setq org-export-with-to nil)
    (setq org-html-head-extra "
       <link href='http://fonts.googleapis.com/css?family=Source+Sansп+Pro:400,700,400&italic,700italic&subset=latin,latin-ext' rel='stylesheet' type='text/css'>
       <link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:400,700' rel='stylesheet' type='text/css'>
       <style type='text/css'>
         body {font-family: 'Source Sans Pro', sans-serif;}
         pre, code {font-family: 'Source Code Pro', monospace;}
       </style>")
   #+END_SRC

* Literate Programming

  The trick to literate programming is in the Babel project, which allows
  org-mode to not only interpret source code blocks, but evaluate them and
  tangle them out to a file.

  #+BEGIN_SRC elisp
    (use-package org
      :config
      (add-to-list 'org-src-lang-modes '("dot" . "graphviz-dot"))

      (org-babel-do-load-languages 'org-babel-load-languages
                                   '((shell      . t)
                                     (js         . t)
                                     (emacs-lisp . t)
                                     (perl       . t)
                                     (python     . t)
                                     (ruby       . t)
                                     (dot        . t)
                                     (css        . t)
                                     (plantuml   . t))))
  #+END_SRC

** Font Coloring in Code Blocks

   Once upon a time, fontifying individual code blocks made it impossible to
   edit the block without org-edit-special. Now that the syntax rendering is faster, I keep it on.

   #+BEGIN_SRC elisp
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
   #+END_SRC

* Technical Artifacts

  Need to provide the =init-org-mode= so that I can require this package.

  #+BEGIN_SRC elisp
    (provide 'init-org-mode)
  #+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization of Org-Mode

#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/elisp/init-org-mode.el
#+PROPERTY:    header-args:sh     :tangle no
#+PROPERTY:    header-args:       :results silent   :eval no-export   :comments org

#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

